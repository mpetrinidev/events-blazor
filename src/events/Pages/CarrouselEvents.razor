@using events.Services
@using events.Models
@inject EventsService EventsInjectService

@if (listEvents != null && listEvents.Count > 0)
{
<div class="bd-example">
  <div id="carouselExampleCaptions" class="carousel slide" data-ride="carousel">
    <ol class="carousel-indicators">
      @for (int i = 0; i < listEvents.Count; i++)
      {
          <li data-target="#carouselExampleCaptions" data-slide-to=@i class=@(i == 0 ? "active" : string.Empty)></li>    
      }
    </ol>
    <div class="carousel-inner">
      @{
        int indexEvents = 0;
      }
      @foreach (var oneEvent in listEvents)
      {
         
          var containerItem = "carousel-item";
          containerItem += indexEvents == 0 ? (containerItem + " active") : containerItem; 

          indexEvents++;
        <div class=@containerItem>
        <img src=@oneEvent.PictureUrl class="d-block w-100" alt="...">
          <div class="carousel-caption d-none d-md-block">
            <h5>@oneEvent.Title</h5>
            <p>@oneEvent.ShortDescription</p>
          </div>
        </div>
      }
    </div>
    <a class="carousel-control-prev" href="#carouselExampleCaptions" role="button" data-slide="prev">
      <span class="carousel-control-prev-icon" aria-hidden="true"></span>
      <span class="sr-only">Previous</span>
    </a>
    <a class="carousel-control-next" href="#carouselExampleCaptions" role="button" data-slide="next">
      <span class="carousel-control-next-icon" aria-hidden="true"></span>
      <span class="sr-only">Next</span>
    </a>
  </div>
</div>
}

@code {
    List<Event> listEvents;
    protected override async Task OnInitAsync() 
    {
        listEvents = await EventsInjectService.GetEventsAsync();
    }
}